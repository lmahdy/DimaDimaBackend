{% extends 'base_backOffice.html.twig' %}

{% block title %}New Team{% endblock %}

{% block stylesheets %}
    {{ parent() }}
    <link href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.8.0/font/bootstrap-icons.css" rel="stylesheet">
    <style>
        :root {
            --primary-color: #4361ee;
            --secondary-color: #3f37c9;
            --accent-color: #4cc9f0;
            --light-color: #f8f9fa;
            --dark-color: #212529;
            --success-color: #4bb543;
            --warning-color: #f8961e;
            --danger-color: #f94144;
        }
        
        .team-creation-container {
            max-width: 1400px;
            margin: 2rem auto;
            padding: 2.5rem;
            background: white;
            border-radius: 16px;
            box-shadow: 0 10px 30px rgba(0,0,0,0.08);
            transition: all 0.3s ease;
        }
        
        .team-creation-container:hover {
            box-shadow: 0 15px 35px rgba(0,0,0,0.12);
        }
        
        .page-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 2.5rem;
            padding-bottom: 1.5rem;
            border-bottom: 1px solid rgba(0,0,0,0.1);
        }
        
        .page-title {
            font-size: 2rem;
            font-weight: 700;
            color: var(--primary-color);
            margin: 0;
        }
        
        .section-card {
            background: white;
            border-radius: 12px;
            box-shadow: 0 4px 12px rgba(0,0,0,0.05);
            margin-bottom: 2.5rem;
            overflow: hidden;
            transition: transform 0.3s ease, box-shadow 0.3s ease;
        }
        
        .section-card:hover {
            transform: translateY(-5px);
            box-shadow: 0 8px 20px rgba(0,0,0,0.1);
        }
        
        .section-header {
            background: linear-gradient(135deg, var(--primary-color), var(--secondary-color));
            color: white;
            padding: 1.2rem 1.5rem;
            display: flex;
            align-items: center;
        }
        
        .section-icon {
            font-size: 1.5rem;
            margin-right: 1rem;
        }
        
        .section-title {
            font-size: 1.25rem;
            font-weight: 600;
            margin: 0;
        }
        
        .section-body {
            padding: 1.5rem;
        }
        
        .drag-container {
            display: flex;
            gap: 2rem;
            margin-bottom: 1rem;
        }
        
        .user-list-container {
            flex: 1;
            position: relative;
        }
        
        .user-list {
            border: 2px dashed #e9ecef;
            padding: 1.5rem;
            border-radius: 12px;
            height: 400px;
            overflow-y: auto;
            background: #f8f9fa;
        }
        
        .drop-zone {
            border: 2px dashed var(--accent-color);
            padding: 1.5rem;
            border-radius: 12px;
            height: 400px;
            overflow-y: auto;
            background-color: rgba(76, 201, 240, 0.05);
            position: relative;
            transition: all 0.3s ease;
        }
        
        .drop-zone.empty::after {
            content: 'Drag and drop members here';
            position: absolute;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            color: #adb5bd;
            font-size: 1.1rem;
            text-align: center;
            width: 80%;
        }
        
        .drop-zone.active {
            background-color: rgba(76, 201, 240, 0.1);
            border-color: var(--primary-color);
        }
        
        .user-card {
            background: white;
            border: 1px solid #e9ecef;
            border-radius: 10px;
            padding: 1rem;
            margin-bottom: 1rem;
            cursor: grab;
            display: flex;
            align-items: center;
            transition: all 0.3s ease;
            position: relative;
            box-shadow: 0 2px 5px rgba(0,0,0,0.03);
        }
        
        .user-card:hover {
            transform: translateY(-3px);
            box-shadow: 0 6px 15px rgba(0,0,0,0.1);
            border-color: var(--accent-color);
        }
        
        .user-card.dragging {
            opacity: 0.7;
            background: #e9ecef;
            transform: scale(0.98);
        }
        
        .user-card.selected {
            background: rgba(67, 97, 238, 0.08);
            border-color: var(--primary-color);
        }
        
        .user-avatar {
            width: 50px;
            height: 50px;
            border-radius: 50%;
            margin-right: 1rem;
            display: flex;
            align-items: center;
            justify-content: center;
            background: linear-gradient(135deg, var(--primary-color), var(--accent-color));
            color: white;
            font-size: 1.3rem;
            flex-shrink: 0;
        }
        
        .user-info {
            flex: 1;
            min-width: 0;
        }
        
        .user-name {
            font-weight: 600;
            margin-bottom: 0.3rem;
            color: var(--dark-color);
            white-space: nowrap;
            overflow: hidden;
            text-overflow: ellipsis;
        }
        
        .user-specialty {
            font-size: 0.85rem;
            color: #6c757d;
            background: #f1f3f5;
            padding: 0.2rem 0.5rem;
            border-radius: 50px;
            display: inline-block;
        }
        
        .remove-btn {
            background: none;
            border: none;
            color: var(--danger-color);
            cursor: pointer;
            font-size: 1.2rem;
            margin-left: 0.5rem;
            transition: transform 0.2s ease;
        }
        
        .remove-btn:hover {
            transform: scale(1.2);
        }
        
        .selection-count {
            position: absolute;
            top: -10px;
            right: -10px;
            background: var(--accent-color);
            color: white;
            border-radius: 50%;
            width: 26px;
            height: 26px;
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 0.8rem;
            font-weight: bold;
            box-shadow: 0 2px 5px rgba(0,0,0,0.2);
        }
        
        .team-name-input {
            border: 2px solid #e9ecef;
            border-radius: 10px;
            padding: 1rem 1.5rem;
            font-size: 1.1rem;
            transition: all 0.3s ease;
        }
        
        .team-name-input:focus {
            border-color: var(--primary-color);
            box-shadow: 0 0 0 0.25rem rgba(67, 97, 238, 0.25);
        }
        
        .create-btn {
            padding: 0.8rem 2rem;
            font-size: 1.1rem;
            font-weight: 600;
            border-radius: 10px;
            background: linear-gradient(135deg, var(--primary-color), var(--secondary-color));
            border: none;
            transition: all 0.3s ease;
            display: flex;
            align-items: center;
            justify-content: center;
            box-shadow: 0 4px 15px rgba(67, 97, 238, 0.3);
        }
        
        .create-btn:hover {
            transform: translateY(-2px);
            box-shadow: 0 8px 25px rgba(67, 97, 238, 0.4);
        }
        
        .create-btn:active {
            transform: translateY(0);
        }
        
        .empty-state {
            text-align: center;
            padding: 2rem;
            color: #adb5bd;
        }
        
        .empty-state i {
            font-size: 3rem;
            margin-bottom: 1rem;
            color: #e9ecef;
        }
        
        /* Custom scrollbar */
        ::-webkit-scrollbar {
            width: 8px;
            height: 8px;
        }
        
        ::-webkit-scrollbar-track {
            background: #f1f1f1;
            border-radius: 10px;
        }
        
        ::-webkit-scrollbar-thumb {
            background: #adb5bd;
            border-radius: 10px;
        }
        
        ::-webkit-scrollbar-thumb:hover {
            background: #868e96;
        }
        
        /* Responsive adjustments */
        @media (max-width: 992px) {
            .drag-container {
                flex-direction: column;
            }
            
            .user-list, .drop-zone {
                height: 300px;
            }
        }
        
        @media (max-width: 768px) {
            .team-creation-container {
                padding: 1.5rem;
            }
            
            .page-title {
                font-size: 1.7rem;
            }
        }
        
        /* Animation */
        @keyframes fadeIn {
            from { opacity: 0; transform: translateY(10px); }
            to { opacity: 1; transform: translateY(0); }
        }
        
        .user-card {
            animation: fadeIn 0.3s ease forwards;
        }
        
        .user-card:nth-child(1) { animation-delay: 0.1s; }
        .user-card:nth-child(2) { animation-delay: 0.2s; }
        .user-card:nth-child(3) { animation-delay: 0.3s; }
        .user-card:nth-child(4) { animation-delay: 0.4s; }
        .user-card:nth-child(5) { animation-delay: 0.5s; }
    </style>
{% endblock %}

{% block body %}
<div class="team-creation-container animate__animated animate__fadeIn">
    <div class="page-header">
        <h1 class="page-title">Create New Team</h1>
        <button id="createTeamBtn" class="btn btn-primary create-btn">
            <i class="bi bi-save me-2"></i>Create Team
        </button>
    </div>
    
    <div class="section-card mb-4">
        <div class="section-body">
            <div class="mb-4">
                <label for="teamName" class="form-label fw-bold">Team Name</label>
                <input type="text" class="form-control team-name-input" id="teamName" required 
                       placeholder="Enter a creative team name">
                <div class="form-text">Choose a name that reflects your team's purpose and identity</div>
            </div>
        </div>
    </div>
    
    <div class="section-card">
        <div class="section-header">
            <i class="bi bi-person-gear section-icon"></i>
            <h2 class="section-title">Select Constructor</h2>
        </div>
        <div class="section-body">
            <div class="drag-container">
                <div class="user-list-container">
                    <h5 class="fw-bold mb-3">Available Constructors</h5>
                    <div class="user-list" id="constructeurList">
                        {% if constructeurs is empty %}
                            <div class="empty-state">
                                <i class="bi bi-person-x"></i>
                                <p>No constructors available</p>
                            </div>
                        {% else %}
                            {% for constructeur in constructeurs %}
                                <div class="user-card" draggable="true" data-id="{{ constructeur.id }}" data-type="constructeur">
                                    <div class="user-avatar">
                                        <i class="bi bi-person-gear"></i>
                                    </div>
                                    <div class="user-info">
                                        <div class="user-name">{{ constructeur.constructeur.nom }} {{ constructeur.constructeur.prenom }}</div>
                                        <div class="user-specialty">Constructor</div>
                                    </div>
                                </div>
                            {% endfor %}
                        {% endif %}
                    </div>
                </div>
                <div class="user-list-container">
                    <h5 class="fw-bold mb-3">Selected Constructor</h5>
                    <div class="drop-zone empty" id="selectedConstructor"></div>
                </div>
            </div>
        </div>
    </div>

    <div class="section-card">
        <div class="section-header">
            <i class="bi bi-clipboard2-data section-icon"></i>
            <h2 class="section-title">Select Stock Manager</h2>
        </div>
        <div class="section-body">
            <div class="drag-container">
                <div class="user-list-container">
                    <h5 class="fw-bold mb-3">Available Stock Managers</h5>
                    <div class="user-list" id="gestionnaireList">
                        {% if gestionnaires is empty %}
                            <div class="empty-state">
                                <i class="bi bi-person-x"></i>
                                <p>No stock managers available</p>
                            </div>
                        {% else %}
                            {% for gestionnaire in gestionnaires %}
                                <div class="user-card" draggable="true" data-id="{{ gestionnaire.id }}" data-type="gestionnaire">
                                    <div class="user-avatar">
                                        <i class="bi bi-clipboard2-data"></i>
                                    </div>
                                    <div class="user-info">
                                        <div class="user-name">{{ gestionnaire.gestionnairestock.nom }} {{ gestionnaire.gestionnairestock.prenom }}</div>
                                        <div class="user-specialty">Stock Manager</div>
                                    </div>
                                </div>
                            {% endfor %}
                        {% endif %}
                    </div>
                </div>
                <div class="user-list-container">
                    <h5 class="fw-bold mb-3">Selected Stock Manager</h5>
                    <div class="drop-zone empty" id="selectedGestionnaire"></div>
                </div>
            </div>
        </div>
    </div>

    <div class="section-card">
        <div class="section-header">
            <i class="bi bi-tools section-icon"></i>
            <h2 class="section-title">Select Artisans</h2>
        </div>
        <div class="section-body">
            <div class="drag-container">
                <div class="user-list-container">
                    <h5 class="fw-bold mb-3">Available Artisans</h5>
                    <div class="user-list" id="artisanList">
                        {% if artisans is empty %}
                            <div class="empty-state">
                                <i class="bi bi-person-x"></i>
                                <p>No artisans available</p>
                            </div>
                        {% else %}
                            {% for artisan in artisans %}
                                <div class="user-card" draggable="true" data-id="{{ artisan.id }}" data-type="artisan">
                                    <div class="user-avatar">
                                        <i class="bi bi-tools"></i>
                                    </div>
                                    <div class="user-info">
                                        <div class="user-name">{{ artisan.artisan.nom }} {{ artisan.artisan.prenom }}</div>
                                        <div class="user-specialty">{{ artisan.specialite }}</div>
                                    </div>
                                </div>
                            {% endfor %}
                        {% endif %}
                    </div>
                </div>
                <div class="user-list-container">
                    <div class="drop-zone empty" id="selectedArtisans"></div>
                </div>
            </div>
        </div>
    </div>
</div>
{% endblock %}

{% block javascripts %}
{{ parent() }}
<script>
document.addEventListener('DOMContentLoaded', function() {
    let selectedConstructor = null;
    let selectedGestionnaire = null;
    let selectedArtisans = [];
    
    // Initialize drag and drop
    function setupDragAndDrop() {
        const cards = document.querySelectorAll('.user-card');
        const dropZones = document.querySelectorAll('.drop-zone');
        
        cards.forEach(card => {
            card.addEventListener('dragstart', dragStart);
            card.addEventListener('dragend', dragEnd);
        });
        
        dropZones.forEach(zone => {
            zone.addEventListener('dragover', dragOver);
            zone.addEventListener('dragenter', dragEnter);
            zone.addEventListener('dragleave', dragLeave);
            zone.addEventListener('drop', drop);
        });
    }
    
    function dragStart(e) {
        this.classList.add('dragging');
        e.dataTransfer.setData('text/plain', this.dataset.id);
        e.dataTransfer.effectAllowed = 'move';
    }
    
    function dragEnd() {
        this.classList.remove('dragging');
    }
    
    function dragOver(e) {
        e.preventDefault();
        e.dataTransfer.dropEffect = 'move';
    }
    
    function dragEnter(e) {
        e.preventDefault();
        this.classList.add('active');
    }
    
    function dragLeave() {
        this.classList.remove('active');
    }
    
    function drop(e) {
        e.preventDefault();
        this.classList.remove('active');
        
        const id = e.dataTransfer.getData('text/plain');
        const type = document.querySelector('.dragging').dataset.type;
        const card = document.querySelector(`.user-card[data-id="${id}"]`);
        
        if (!card) return;
        
        // Handle single selection (constructor/gestionnaire)
        if (type === 'constructeur' || type === 'gestionnaire') {
            // Remove previous selection highlight
            const previousSelected = document.querySelectorAll(`.user-card.selected[data-type="${type}"]`);
            previousSelected.forEach(el => el.classList.remove('selected'));
            
            // Highlight new selection
            card.classList.add('selected');
            
            // Update drop zone
            // Update drop zone
this.innerHTML = ''; // Vide la zone d'abord
this.appendChild(createSelectedCard(card, type)); // Ajoute l'élément DOM directement
            this.classList.remove('empty');
            
            // Update data
            if (type === 'constructeur') selectedConstructor = id;
            if (type === 'gestionnaire') selectedGestionnaire = id;
        } 
        // Handle multiple selection (artisans)
        else if (type === 'artisan') {
            if (!selectedArtisans.includes(id)) {
                selectedArtisans.push(id);
                card.classList.add('selected');
                
                // Update drop zone
                if (this.classList.contains('empty')) {
                    this.innerHTML = '';
                    this.classList.remove('empty');
                }
                this.appendChild(createSelectedCard(card, type));
                
                // Update selection count in header
                updateSelectionCount();
            }
        }
    }
    
    function createSelectedCard(originalCard, type) {
        const card = originalCard.cloneNode(true);
        card.classList.remove('dragging');
        card.draggable = false;
        card.style.cursor = 'default';
        card.style.animation = 'none';
        
        // Add remove button
        const removeBtn = document.createElement('button');
        removeBtn.className = 'remove-btn';
        removeBtn.innerHTML = '<i class="bi bi-x-lg"></i>';
        removeBtn.onclick = function() {
            removeSelection(card, type);
        };
        
        card.appendChild(removeBtn);
        return card;
    }
    
    function removeSelection(card, type) {
        const id = card.dataset.id;
        
        if (type === 'constructeur') {
            selectedConstructor = null;
            document.querySelector(`.user-card[data-id="${id}"]`).classList.remove('selected');
            document.getElementById('selectedConstructor').innerHTML = '';
            document.getElementById('selectedConstructor').classList.add('empty');
        } 
        else if (type === 'gestionnaire') {
            selectedGestionnaire = null;
            document.querySelector(`.user-card[data-id="${id}"]`).classList.remove('selected');
            document.getElementById('selectedGestionnaire').innerHTML = '';
            document.getElementById('selectedGestionnaire').classList.add('empty');
        } 
        else if (type === 'artisan') {
            selectedArtisans = selectedArtisans.filter(a => a !== id);
            document.querySelector(`.user-card[data-id="${id}"]`).classList.remove('selected');
            card.remove();
            
            if (selectedArtisans.length === 0) {
                document.getElementById('selectedArtisans').innerHTML = '';
                document.getElementById('selectedArtisans').classList.add('empty');
            }
            
            updateSelectionCount();
        }
    }
    
    function updateSelectionCount() {
        const countElement = document.getElementById('artisanSelectionCount');
        if (!countElement && selectedArtisans.length > 0) {
            const newCountElement = document.createElement('div');
            newCountElement.id = 'artisanSelectionCount';
            newCountElement.className = 'selection-count';
            newCountElement.textContent = selectedArtisans.length;
            document.getElementById('selectedArtisans').appendChild(newCountElement);
        } else if (countElement) {
            countElement.textContent = selectedArtisans.length;
            if (selectedArtisans.length === 0) {
                countElement.remove();
            }
        }
    }
    
    
    // Create team button
    document.getElementById('createTeamBtn').addEventListener('click', function() {
        const teamName = document.getElementById('teamName').value.trim();
        
        if (!teamName) {
            showAlert('Please enter a team name', 'warning');
            return;
        }
        
        if (!selectedConstructor) {
            showAlert('Please select a constructor', 'warning');
            return;
        }
        
        if (!selectedGestionnaire) {
            showAlert('Please select a stock manager', 'warning');
            return;
        }
        
        const data = {
            nom: teamName,
            constructeur: selectedConstructor,
            gestionnaire: selectedGestionnaire,
            artisans: selectedArtisans
        };
        
        // Show loading state
        const btn = this;
        btn.disabled = true;
        btn.innerHTML = '<span class="spinner-border spinner-border-sm me-2" role="status" aria-hidden="true"></span>Creating...';
        
        fetch('{{ path('app_equipe_new') }}', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                'X-Requested-With': 'XMLHttpRequest'
            },
            body: JSON.stringify(data)
        })
        .then(response => {
            if (!response.ok) {
                throw new Error('Network response was not ok');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                showAlert('Team created successfully! Redirecting...', 'success');
                setTimeout(() => {
                    window.location.href = '{{ path('app_equipe_index') }}';
                }, 1500);
            } else {
                throw new Error(data.message || 'Error creating team');
            }
        })
        .catch(error => {
            console.error('Error:', error);
            showAlert(error.message || 'Error creating team', 'danger');
            btn.disabled = false;
            btn.innerHTML = '<i class="bi bi-save me-2"></i>Create Team';
        });
    });
    
    function showAlert(message, type) {
        // Remove any existing alerts
        const existingAlert = document.querySelector('.alert');
        if (existingAlert) {
            existingAlert.remove();
        }
        
        const alert = document.createElement('div');
        alert.className = `alert alert-${type} alert-dismissible fade show`;
        alert.style.position = 'fixed';
        alert.style.top = '20px';
        alert.style.right = '20px';
        alert.style.zIndex = '1000';
        alert.style.minWidth = '300px';
        alert.style.boxShadow = '0 4px 12px rgba(0,0,0,0.15)';
        alert.innerHTML = `
            ${message}
            <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
        `;
        
        document.body.appendChild(alert);
        
        // Auto dismiss after 5 seconds
        setTimeout(() => {
            alert.classList.remove('show');
            setTimeout(() => alert.remove(), 150);
        }, 5000);
    }
    
    setupDragAndDrop();
});
</script>
{% endblock %}