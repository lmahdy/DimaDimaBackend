{% extends 'base_frontOffice.html.twig' %}

{% block title %}Ajouter un Terrain - Our Batima{% endblock %}

{% block stylesheets %}
    {{ parent() }}
    <link rel="stylesheet" href="https://fonts.googleapis.com/css2?family=Material+Symbols+Rounded:opsz,wght,FILL,GRAD@24,400,0,0" />
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css">
    <link rel="stylesheet" href="https://unpkg.com/leaflet@1.9.4/dist/leaflet.css" />
    <link rel="stylesheet" href="https://unpkg.com/leaflet-control-geocoder/dist/Control.Geocoder.css" />
    <style>
        .terrain-form-container {
            background: white;
            border-radius: 12px;
            box-shadow: 0 4px 20px rgba(0, 0, 0, 0.1);
            padding: 30px;
            margin: 30px auto;
            max-width: 1200px;
        }
        
        .form-header {
            text-align: center;
            margin-bottom: 30px;
            padding-bottom: 20px;
            border-bottom: 1px solid #eee;
        }
        
        .form-header h2 {
            color: #2c3e50;
            font-weight: 600;
        }
        
        .form-group {
            margin-bottom: 1.5rem;
        }
        
        .form-label {
            font-weight: 500;
            color: #2c3e50;
            margin-bottom: 0.5rem;
        }
        
        .form-control {
            border-radius: 8px;
            padding: 10px 15px;
            border: 1px solid #d2d6da;
            transition: all 0.3s;
        }
        
        .form-control:focus {
            border-color: #3498db;
            box-shadow: 0 0 0 2px rgba(52, 152, 219, 0.2);
        }
        
        .input-group-text {
            background-color: #f8f9fa;
            border: 1px solid #d2d6da;
        }
        
        /* Map styles */
        #map {
            height: 400px;
            border-radius: 12px;
            margin-bottom: 15px;
            border: 2px solid #dee2e6;
            z-index: 1;
        }
        
        .map-controls {
            display: flex;
            gap: 10px;
            margin-bottom: 15px;
        }
        
        .map-controls button {
            flex: 1;
            padding: 10px 15px;
            border-radius: 8px;
            border: none;
            background: #3498db;
            color: white;
            cursor: pointer;
            transition: all 0.2s;
            font-size: 14px;
        }
        
        .map-controls button:hover {
            background: #2980b9;
        }
        
        .map-controls button i {
            margin-right: 5px;
        }
        
        .map-info-panel {
            background: rgba(255,255,255,0.95);
            padding: 15px;
            border-radius: 8px;
            margin-bottom: 15px;
            box-shadow: 0 2px 10px rgba(0,0,0,0.1);
        }
        
        .map-info-panel p {
            margin-bottom: 5px;
            color: #2c3e50;
        }
        
        .red-marker { 
            filter: hue-rotate(0deg) saturate(5); 
        }
        
        /* Error styling */
        .is-invalid {
            border-color: #e74c3c !important;
        }
        .is-invalid:focus {
            border-color: #e74c3c !important;
            box-shadow: 0 0 0 0.25rem rgba(231, 76, 60, 0.25) !important;
        }
        .form-error-message {
            color: #e74c3c;
            font-size: 0.875rem;
            margin-top: 0.25rem;
            display: block;
        }
        .form-error-icon {
            color: #e74c3c;
            margin-right: 0.25rem;
        }
        
        /* Button styles */
        .btn-action-group {
            display: flex;
            justify-content: space-between;
            margin-top: 30px;
            gap: 15px;
        }
        
        .btn-primary {
            background-color: #3498db;
            border: none;
            color: white;
            padding: 12px 24px;
            border-radius: 8px;
            font-weight: 500;
            transition: all 0.3s ease;
            box-shadow: 0 2px 8px rgba(52, 152, 219, 0.2);
            display: inline-flex;
            align-items: center;
            justify-content: center;
        }
        
        .btn-primary:hover {
            background-color: #2980b9;
            transform: translateY(-2px);
            box-shadow: 0 4px 12px rgba(52, 152, 219, 0.3);
        }
        
        .btn-outline-secondary {
            border: 2px solid #95a5a6;
            color: #7f8c8d;
            background-color: transparent;
            padding: 12px 24px;
            border-radius: 8px;
            font-weight: 500;
            transition: all 0.3s ease;
            display: inline-flex;
            align-items: center;
            justify-content: center;
        }
        
        .btn-outline-secondary:hover {
            background-color: #95a5a6;
            color: white;
            border-color: #95a5a6;
            transform: translateY(-2px);
            box-shadow: 0 4px 8px rgba(0,0,0,0.1);
        }
        
        .btn i {
            margin-right: 8px;
            font-size: 1.1em;
        }
        
        /* Breadcrumb styles */
        .breadcrumb {
            background-color: transparent;
            padding: 0;
            margin-bottom: 20px;
        }
        
        .breadcrumb-item a {
            color: #3498db;
            text-decoration: none;
        }
        
        .breadcrumb-item.active {
            color: #7f8c8d;
        }
        
        .breadcrumb-item + .breadcrumb-item::before {
            content: ">";
            color: #7f8c8d;
        }
        
        /* Responsive adjustments */
        @media (max-width: 768px) {
            .btn-action-group {
                flex-direction: column;
            }
            
            .btn-primary, .btn-outline-secondary {
                width: 100%;
            }
        }
    </style>
{% endblock %}

{% block body %}
<div class="container">
    <nav aria-label="breadcrumb">
        <ol class="breadcrumb">
            <li class="breadcrumb-item"><a href="{{ path('app_home') }}">Accueil</a></li>
            <li class="breadcrumb-item"><a href="{{ path('app_projet_front_index') }}">Projets</a></li>
            <li class="breadcrumb-item active">Ajouter un Terrain</li>
        </ol>
    </nav>

    <div class="terrain-form-container">
        <div class="form-header">
            <h2><i class="fas fa-map-marked-alt me-2"></i> Ajouter un nouveau Terrain</h2>
            <p class="text-muted">Localisez votre terrain sur la carte et remplissez les d√©tails ci-dessous</p>
        </div>
        
        {% for message in app.flashes('success') %}
            <div class="alert alert-success alert-dismissible fade show">
                <i class="fas fa-check-circle me-2"></i>
                {{ message }}
                <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
            </div>
        {% endfor %}

        {% for message in app.flashes('error') %}
            <div class="alert alert-danger alert-dismissible fade show">
                <i class="fas fa-exclamation-circle me-2"></i>
                {{ message }}
                <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
            </div>
        {% endfor %}

        {{ form_start(form, {'attr': {'class': 'form-horizontal'}}) }}
            <div class="row">
                <div class="col-12">
                    <div id="map"></div>
                    <div class="map-controls">
                        <button type="button" id="locate-me" class="btn btn-primary">
                            <i class="fas fa-location-arrow"></i> Ma position
                        </button>
                        <button type="button" id="toggle-satellite" class="btn btn-primary">
                            <i class="fas fa-satellite"></i> Vue Satellite
                        </button>
                    </div>
                    <div class="map-info-panel">
                        <p>üìç <span id="coordinates">-</span></p>
                        <p>üè† <span id="address">-</span></p>
                    </div>
                    {{ form_widget(form.latitude) }}
                    {{ form_widget(form.longitude) }}
                </div>
            </div>

            <div class="row">
                <div class="col-md-6">
                    <div class="form-group">
                        {{ form_label(form.emplacement) }}
                        {{ form_widget(form.emplacement, {
                            'attr': {
                                'class': 'form-control' ~ (form.emplacement.vars.errors|length ? ' is-invalid' : ''),
                                'placeholder': 'Ex: Quartier r√©sidentiel, Sousse',
                                'readonly': 'readonly'
                            }
                        }) }}
                        {% if form.emplacement.vars.errors|length %}
                            <div class="form-error-message">
                                <i class="fas fa-exclamation-circle form-error-icon"></i>
                                {{ form_errors(form.emplacement) }}
                            </div>
                        {% endif %}
                    </div>
                </div>
                <div class="col-md-6">
                    <div class="form-group">
                        {{ form_label(form.superficie) }}
                        <div class="input-group">
                            {{ form_widget(form.superficie, {
                                'attr': {
                                    'class': 'form-control' ~ (form.superficie.vars.errors|length ? ' is-invalid' : ''),
                                    'placeholder': 'Ex: 500'
                                }
                            }) }}
                            <span class="input-group-text">m¬≤</span>
                        </div>
                        {% if form.superficie.vars.errors|length %}
                            <div class="form-error-message">
                                <i class="fas fa-exclamation-circle form-error-icon"></i>
                                {{ form_errors(form.superficie) }}
                            </div>
                        {% endif %}
                    </div>
                </div>
            </div>

            <div class="row">
                <div class="col-md-6">
                    <div class="form-group">
                        {{ form_label(form.caracteristiques) }}
                        {{ form_widget(form.caracteristiques, {
                            'attr': {
                                'class': 'form-control' ~ (form.caracteristiques.vars.errors|length ? ' is-invalid' : ''),
                                'placeholder': 'Ex: Terrain plat avec vue mer'
                            }
                        }) }}
                        {% if form.caracteristiques.vars.errors|length %}
                            <div class="form-error-message">
                                <i class="fas fa-exclamation-circle form-error-icon"></i>
                                {{ form_errors(form.caracteristiques) }}
                            </div>
                        {% endif %}
                    </div>
                </div>
                <div class="col-md-6">
                    <div class="form-group">
                        {{ form_label(form.detailsgeo) }}
                        {{ form_widget(form.detailsgeo, {
                            'attr': {
                                'class': 'form-control' ~ (form.detailsgeo.vars.errors|length ? ' is-invalid' : ''),
                                'placeholder': 'Ex: Coordonn√©es GPS, pente, orientation',
                                'readonly': 'readonly'
                            }
                        }) }}
                        {% if form.detailsgeo.vars.errors|length %}
                            <div class="form-error-message">
                                <i class="fas fa-exclamation-circle form-error-icon"></i>
                                {{ form_errors(form.detailsgeo) }}
                            </div>
                        {% endif %}
                    </div>
                </div>
            </div>

            <div class="btn-action-group">
                            <a href="{{ path('app_projet_front_index') }}" class="btn btn-outline-secondary">
                    <i class="fas fa-arrow-left"></i> Retour aux Projets
                </a>
                <button type="submit" class="btn btn-primary">
                    <i class="fas fa-save"></i> Enregistrer
                </button>

            </div>

        {{ form_end(form) }}
    </div>
</div>
{% endblock %}

{% block javascripts %}
    {{ parent() }}
    <script src="https://unpkg.com/leaflet@1.9.4/dist/leaflet.js"></script>
    <script src="https://unpkg.com/leaflet-control-geocoder/dist/Control.Geocoder.js"></script>
    
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            const GEOCODING_SERVICE = 'https://geocode.maps.co';
            const API_KEY = '67bf5aececfa5982522390euj6000e5';
            
            const emplacementInput = document.getElementById('{{ form.emplacement.vars.id }}');
            const detailsgeoInput = document.getElementById('{{ form.detailsgeo.vars.id }}');
            
            const map = L.map('map').setView([36.8, 10.18], 12);
            
            const baseLayers = {
                "OpenStreetMap": L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
                    maxZoom: 19,
                    attribution: '¬© OpenStreetMap'
                }),
                "Satellite": L.tileLayer('https://server.arcgisonline.com/ArcGIS/rest/services/World_Imagery/MapServer/tile/{z}/{y}/{x}', {
                    maxZoom: 19,
                    attribution: '¬© Esri'
                })
            };
            
            baseLayers["OpenStreetMap"].addTo(map);
            
            const geocoder = L.Control.geocoder({
                defaultMarkGeocode: false,
                position: 'topright'
            }).addTo(map);
            
            let currentMarker = L.marker(map.getCenter(), {
                draggable: true,
                icon: L.icon({
                    iconUrl: 'https://raw.githubusercontent.com/pointhi/leaflet-color-markers/master/img/marker-icon-red.png',
                    iconSize: [25, 41],
                    iconAnchor: [12, 41],
                    popupAnchor: [1, -34],
                    className: 'red-marker'
                })
            }).addTo(map);
            
            // Update form fields when marker moves
            currentMarker.on('dragend', async function(e) {
                const latlng = currentMarker.getLatLng();
                await updateFormFields(latlng.lat, latlng.lng);
            });
            
            // Update marker position when map is clicked
            map.on('click', async function(e) {
                currentMarker.setLatLng(e.latlng);
                await updateFormFields(e.latlng.lat, e.latlng.lng);
            });
            
            // Handle geocoder results
            geocoder.on('markgeocode', function(e) {
                const latlng = e.geocode.center;
                currentMarker.setLatLng(latlng);
                map.setView(latlng, 17);
                updateFormFields(latlng.lat, latlng.lng, e.geocode.name);
            });
            
            // Locate me button
            document.getElementById('locate-me').addEventListener('click', function() {
                if (navigator.geolocation) {
                    navigator.geolocation.getCurrentPosition(
                        async function(position) {
                            const latlng = {
                                lat: position.coords.latitude,
                                lng: position.coords.longitude
                            };
                            currentMarker.setLatLng(latlng);
                            map.setView(latlng, 17);
                            await updateFormFields(latlng.lat, latlng.lng);
                        },
                        function(error) {
                            alert("Erreur de g√©olocalisation : " + error.message);
                        }
                    );
                } else {
                    alert("Votre navigateur ne supporte pas la g√©olocalisation");
                }
            });
            
            // Toggle satellite view
            document.getElementById('toggle-satellite').addEventListener('click', function() {
                const isSatellite = map.hasLayer(baseLayers["Satellite"]);
                Object.values(baseLayers).forEach(layer => layer.remove());
                baseLayers[isSatellite ? "OpenStreetMap" : "Satellite"].addTo(map);
                this.innerHTML = isSatellite ? 
                    '<i class="fas fa-map"></i> Vue Standard' : 
                    '<i class="fas fa-satellite"></i> Vue Satellite';
            });
            
            // Update form fields with location data
            async function updateFormFields(lat, lng, address = null) {
                document.getElementById('{{ form.latitude.vars.id }}').value = lat;
                document.getElementById('{{ form.longitude.vars.id }}').value = lng;
                
                // Update info panel
                document.getElementById('coordinates').textContent = `${lat.toFixed(6)}, ${lng.toFixed(6)}`;
                
                if (!address) {
                    try {
                        const response = await fetch(`${GEOCODING_SERVICE}/reverse?lat=${lat}&lon=${lng}&api_key=${API_KEY}`);
                        if (!response.ok) throw new Error('Erreur de g√©ocodage');
                        
                        const data = await response.json();
                        address = data.display_name || "Adresse non trouv√©e";
                    } catch {
                        address = "Adresse non trouv√©e";
                    }
                }
                
                emplacementInput.value = address;
                detailsgeoInput.value = `Lat: ${lat.toFixed(6)}, Lng: ${lng.toFixed(6)}`;
                document.getElementById('address').textContent = address;
                
                // Add validation classes
                emplacementInput.classList.remove('is-invalid');
                emplacementInput.classList.add('is-valid');
                detailsgeoInput.classList.remove('is-invalid');
                detailsgeoInput.classList.add('is-valid');
            }
            
            // Initialize with current marker position
            updateFormFields(map.getCenter().lat, map.getCenter().lng);
        });
    </script>
{% endblock %}