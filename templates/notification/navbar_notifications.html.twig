{# templates/notification/navbar_notifications.html.twig #}
<li class="nav-item dropdown">
    <a class="nav-link" href="#" id="navbarNotifications" role="button" data-bs-toggle="dropdown" aria-expanded="false">
        <i class="material-symbols-rounded">notifications</i>
        {% set unreadCount = render(controller('App\\Controller\\NotificationController::unreadCount')) %}
        <span class="badge bg-danger">{{ unreadCount }}</span>
    </a>
    <ul class="dropdown-menu dropdown-menu-end notification-dropdown" aria-labelledby="navbarNotifications">
        {% set recentNotifications = render(controller('App\\Controller\\NotificationController::recentUnreadNotifications')) %}
        {% if recentNotifications is empty %}
            <li><span class="dropdown-item text-muted">No new notifications (count: {{ unreadCount }})</span></li>
        {% else %}
            {{ recentNotifications|raw }}
        {% endif %}
        <li><hr class="dropdown-divider"></li>
        <li><a class="dropdown-item text-center" href="{{ path('app_notifications') }}">View all notifications</a></li>
    </ul>
</li>
<style>
.notification-dropdown {
    width: 350px;
    max-height: 500px;
    overflow-y: auto;
}
.notification-item {
    padding: 0.75rem 1.25rem;
    border-bottom: 1px solid #eee;
}
.notification-item:last-child {
    border-bottom: none;
}
.notification-planification {
    border-left: 3px solid #0d6efd;
}
.notification-team {
    border-left: 3px solid #6c757d;
}
.notification-content {
    flex-grow: 1;
    padding-right: 10px;
}
.mark-as-read {
    color: #6c757d;
    text-decoration: none;
}
.mark-as-read:hover {
    color: #0d6efd;
}
</style>

<script>
document.addEventListener('DOMContentLoaded', function() {
    document.querySelectorAll('.mark-as-read').forEach(link => {
        link.addEventListener('click', async function(e) {
            e.preventDefault();
            const notificationItem = this.closest('.notification-item');
            
            try {
                const response = await fetch(this.href);
                if (response.ok) {
                    notificationItem.style.opacity = '0';
                    setTimeout(() => {
                        notificationItem.remove();
                        updateNotificationCount();
                    }, 300);
                }
            } catch (error) {
                window.location.href = this.href;
            }
        });
    });

    function updateNotificationCount() {
        fetch('{{ path('notification_unread_count') }}')
            .then(response => response.text())
            .then(count => {
                const badge = document.querySelector('#navbarNotifications .badge');
                badge.textContent = count;
            });
    }
});
</script>