{% extends 'base.html.twig' %}

{% block title %}Connexion Faciale{% endblock %}

{% block stylesheets %}
{{ parent() }}
<style>
    .face-auth-container {
        max-width: 500px;
        margin: 0 auto;
        background: white;
        border-radius: 15px;
        padding: 2rem;
        box-shadow: 0 5px 15px rgba(0,0,0,0.1);
    }
    
    .camera-feed {
        width: 100%;
        height: 400px;
        background: #000;
        position: relative;
        border-radius: 10px;
        overflow: hidden;
        margin-bottom: 1rem;
    }
    
    .camera-overlay {
        position: absolute;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        border: 3px solid rgba(255,255,255,0.3);
        border-radius: 10px;
        pointer-events: none;
    }
    
    .auth-options {
        margin-top: 2rem;
        border-top: 1px solid #eee;
        padding-top: 1.5rem;
    }
    
    #statusMessage {
        min-height: 50px;
    }
</style>
{% endblock %}

{% block body %}
<div class="container py-5">
    <div class="face-auth-container">
        <h2 class="text-center mb-4">Connexion par reconnaissance faciale</h2>
        
        <div class="text-center mb-4">
            <p>Positionnez votre visage dans le cadre ci-dessous</p>
        </div>
        
        <div class="camera-feed">
            <video id="videoFeed" autoplay playsinline class="h-100 w-100"></video>
            <div class="camera-overlay"></div>
        </div>
        
        <div class="text-center">
            <button id="captureBtn" class="btn btn-primary btn-lg">
                <i class="bi bi-camera-fill me-2"></i>Capturer et vérifier
            </button>
        </div>
        
        <div id="statusMessage" class="mt-3 text-center"></div>
        
        <div class="auth-options text-center">
            <p class="text-muted">Ou connectez-vous autrement</p>
            <a href="{{ path('app_login') }}" class="btn btn-outline-primary me-2">
                <i class="bi bi-box-arrow-in-right me-2"></i>Email/Mot de passe
            </a>
        </div>
    </div>
</div>

<div class="modal fade" id="userSelectModal" tabindex="-1" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Plusieurs comptes trouvés</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <p>Nous avons trouvé plusieurs comptes correspondant à votre visage :</p>
                <div id="userList" class="list-group"></div>
            </div>
        </div>
    </div>
</div>
{% endblock %}

{% block javascripts %}
{{ parent() }}
<script>
document.addEventListener('DOMContentLoaded', function() {
    const video = document.getElementById('videoFeed');
    const captureBtn = document.getElementById('captureBtn');
    const statusMessage = document.getElementById('statusMessage');
    const userSelectModal = new bootstrap.Modal('#userSelectModal');
    let stream = null;
    let canvas = document.createElement('canvas');
    let ctx = canvas.getContext('2d');

    // Démarrer la caméra
    async function startCamera() {
        try {
            stream = await navigator.mediaDevices.getUserMedia({ 
                video: { 
                    width: { ideal: 640 }, 
                    height: { ideal: 480 },
                    facingMode: 'user'
                } 
            });
            video.srcObject = stream;
        } catch (err) {
            console.error("Erreur caméra:", err);
            showError("Impossible d'accéder à la caméra. Veuillez vérifier les permissions.");
        }
    }

    // Vérifier si l'image contient un visage
    function isFaceValid(imageData) {
        let sum = 0, count = 0;
        for (let i = 0; i < imageData.data.length; i += 4) {
            sum += imageData.data[i] + imageData.data[i+1] + imageData.data[i+2];
            count += 3;
        }
        const avg = sum / count;
        
        let variance = 0;
        for (let i = 0; i < imageData.data.length; i += 4) {
            const diff = (imageData.data[i] + imageData.data[i+1] + imageData.data[i+2]) / 3 - avg;
            variance += diff * diff;
        }
        variance = variance / (imageData.data.length / 4);
        
        return variance > 100;
    }

    // Capturer l'image et envoyer au serveur
    captureBtn.addEventListener('click', async function() {
        if (!stream) {
            showError("La caméra n'est pas prête");
            return;
        }

        canvas.width = video.videoWidth;
        canvas.height = video.videoHeight;
        ctx.drawImage(video, 0, 0, canvas.width, canvas.height);
        
        // Vérification de la qualité de l'image
        const imageData = ctx.getImageData(0, 0, canvas.width, canvas.height);
        if (!isFaceValid(imageData)) {
            showError("Aucun visage détecté. Veuillez vous positionner correctement.");
            return;
        }

        const faceData = canvas.toDataURL('image/jpeg', 0.8);
        
        captureBtn.disabled = true;
        statusMessage.innerHTML = `
            <div class="spinner-border spinner-border-sm text-primary me-2" role="status">
                <span class="visually-hidden">Chargement...</span>
            </div>
            Recherche de votre compte...
        `;

        try {
            const response = await fetch('{{ path("app_face_login") }}', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/x-www-form-urlencoded',
                },
                body: new URLSearchParams({
                    'face_data': faceData
                })
            });

            const data = await response.json();

            if (data.success) {
                if (data.multiple) {
                    showUserSelection(data.users);
                } else {
                    window.location.href = data.redirect;
                }
            } else {
                throw new Error(data.message || "Aucun compte trouvé");
            }
        } catch (error) {
            showError(error.message);
        } finally {
            captureBtn.disabled = false;
        }
    });

    // Afficher la sélection d'utilisateurs
    function showUserSelection(users) {
        const userList = document.getElementById('userList');
        userList.innerHTML = '';
        
        users.forEach(user => {
            const userEl = document.createElement('button');
            userEl.className = 'list-group-item list-group-item-action';
            userEl.innerHTML = `
                <div class="d-flex justify-content-between align-items-center">
                    <div>
                        <h6 class="mb-1">${user.fullName}</h6>
                        <small class="text-muted">${user.email}</small>
                    </div>
                    <span class="badge bg-primary rounded-pill">${user.role}</span>
                </div>
            `;
            
            userEl.addEventListener('click', async () => {
                userSelectModal.hide();
                statusMessage.innerHTML = `
                    <div class="spinner-border spinner-border-sm text-primary me-2" role="status">
                        <span class="visually-hidden">Chargement...</span>
                    </div>
                    Connexion en cours...
                `;
                
                try {
                    const response = await fetch('{{ path("app_face_login_select") }}', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/x-www-form-urlencoded',
                        },
                        body: new URLSearchParams({
                            'user_id': user.id
                        })
                    });
                    
                    const data = await response.json();
                    
                    if (data.success) {
                        window.location.href = data.redirect;
                    } else {
                        throw new Error("Erreur lors de la connexion");
                    }
                } catch (error) {
                    showError(error.message);
                }
            });
            
            userList.appendChild(userEl);
        });
        
        userSelectModal.show();
    }

    // Afficher un message d'erreur
    function showError(message) {
        statusMessage.innerHTML = `
            <div class="alert alert-danger">
                <i class="bi bi-exclamation-triangle-fill me-2"></i>
                ${message}
            </div>
        `;
    }

    // Nettoyer à la fermeture
    window.addEventListener('beforeunload', () => {
        if (stream) {
            stream.getTracks().forEach(track => track.stop());
        }
    });

    // Démarrer la caméra
    startCamera();
});
</script>
{% endblock %}