{% extends 'base_backOffice.html.twig' %}

{% block title %}Modifier Terrain{% endblock %}

{% block stylesheets %}
  {{ parent() }}
  <link rel="stylesheet" href="https://fonts.googleapis.com/css2?family=Material+Symbols+Rounded:opsz,wght,FILL,GRAD@24,400,0,0" />
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css">
  <link rel="stylesheet" href="https://unpkg.com/leaflet@1.9.4/dist/leaflet.css" />
  <link rel="stylesheet" href="https://unpkg.com/leaflet-control-geocoder/dist/Control.Geocoder.css" />
  <style>
    .card {
      border-radius: 12px;
      box-shadow: 0 4px 20px 0 rgba(0, 0, 0, 0.14), 
                  0 7px 10px -5px rgba(0, 0, 0, 0.4);
    }
    .form-group {
      margin-bottom: 1.5rem;
    }
    .form-control {
      border-radius: 8px;
      padding: 10px 15px;
      border: 1px solid #d2d6da;
      transition: all 0.3s;
    }
    .form-control:focus {
      border-color: #4CAF50;
      box-shadow: 0 0 0 2px rgba(76, 175, 80, 0.1);
    }
    .form-text {
      font-size: 0.8rem;
      color: #6c757d;
      margin-top: 0.25rem;
    }
    .btn-action-group {
      display: flex;
      gap: 10px;
      margin-top: 20px;
    }
    .input-group-text {
      background-color: #f8f9fa;
      border: 1px solid #d2d6da;
    }
    .bg-gradient-success {
      background: linear-gradient(195deg, #4CAF50 0%, #2E7D32 100%);
    }
    
    /* Map styles */
    #map {
      height: 400px;
      border-radius: 12px;
      margin-bottom: 15px;
      border: 2px solid #dee2e6;
      z-index: 1;
    }
    
    .map-controls {
      display: flex;
      gap: 10px;
      margin-bottom: 15px;
    }
    
    .map-controls button {
      flex: 1;
      padding: 8px 12px;
      border-radius: 8px;
      border: none;
      background: #f8f9fa;
      cursor: pointer;
      transition: all 0.2s;
      font-size: 14px;
    }
    
    .map-controls button:hover {
      background: #e9ecef;
    }
    
    .map-controls button i {
      margin-right: 5px;
    }
    
    .map-info-panel {
      background: rgba(255,255,255,0.95);
      padding: 15px;
      border-radius: 8px;
      margin-bottom: 15px;
      box-shadow: 0 2px 10px rgba(0,0,0,0.1);
    }
    
    .map-info-panel p {
      margin-bottom: 5px;
    }
    
    .red-marker { 
      filter: hue-rotate(0deg) saturate(5); 
    }
    
    /* Error styling */
    .is-invalid {
      border-color: #dc3545 !important;
    }
    .is-invalid:focus {
      border-color: #dc3545 !important;
      box-shadow: 0 0 0 0.25rem rgba(220,53,69,.25) !important;
    }
    .form-error-message {
      color: #dc3545;
      font-size: 0.875rem;
      margin-top: 0.25rem;
      display: block;
    }
    .form-error-icon {
      color: #dc3545;
      margin-right: 0.25rem;
    }
    .alert-danger {
      color: #dc3545;
      background-color: #f8d7da;
      border-color: #f5c6cb;
    }
  </style>
{% endblock %}

{% block javascripts %}
  {{ parent() }}
  <script src="https://unpkg.com/leaflet@1.9.4/dist/leaflet.js"></script>
  <script src="https://unpkg.com/leaflet-control-geocoder/dist/Control.Geocoder.js"></script>
  
  <script>
    document.addEventListener('DOMContentLoaded', function() {
      const GEOCODING_SERVICE = 'https://geocode.maps.co';
      const API_KEY = '67bf5aececfa5982522390euj6000e5';
      
      // Form elements
      const emplacementInput = document.getElementById('{{ form.emplacement.vars.id }}');
      const detailsgeoInput = document.getElementById('{{ form.detailsgeo.vars.id }}');
      
      // Parse existing coordinates from detailsgeo if available
      let initialLat = 36.8;
      let initialLng = 10.18;
      let initialZoom = 12;
      
      const existingDetails = detailsgeoInput.value;
      if (existingDetails) {
        const coordMatch = existingDetails.match(/Lat: ([\d.-]+), Lng: ([\d.-]+)/);
        if (coordMatch && coordMatch.length === 3) {
          initialLat = parseFloat(coordMatch[1]);
          initialLng = parseFloat(coordMatch[2]);
          initialZoom = 15;
        }
      }
      
      // Initialize map with existing or default coordinates
      const map = L.map('map').setView([initialLat, initialLng], initialZoom);
      
      // Base layers
      const baseLayers = {
        "OpenStreetMap": L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
          maxZoom: 19,
          attribution: '© OpenStreetMap'
        }),
        "Satellite": L.tileLayer('https://server.arcgisonline.com/ArcGIS/rest/services/World_Imagery/MapServer/tile/{z}/{y}/{x}', {
          maxZoom: 19,
          attribution: '© Esri'
        })
      };
      
      baseLayers["OpenStreetMap"].addTo(map);
      
      // Add geocoder control (search will be available through this)
      const geocoder = L.Control.geocoder({
        defaultMarkGeocode: false,
        position: 'topright'
      }).addTo(map);
      
      // Marker with custom icon
      let currentMarker = L.marker([initialLat, initialLng], {
        draggable: true,
        icon: L.icon({
          iconUrl: 'https://raw.githubusercontent.com/pointhi/leaflet-color-markers/master/img/marker-icon-red.png',
          iconSize: [25, 41],
          iconAnchor: [12, 41],
          popupAnchor: [1, -34],
          className: 'red-marker'
        })
      }).addTo(map);
      
      // Update form fields when marker moves
      currentMarker.on('dragend', async function(e) {
        const latlng = currentMarker.getLatLng();
        await updateFormFields(latlng.lat, latlng.lng);
      });
      
      // Update marker position when map is clicked
      map.on('click', async function(e) {
        currentMarker.setLatLng(e.latlng);
        await updateFormFields(e.latlng.lat, e.latlng.lng);
      });
      
      // Handle geocoder results
      geocoder.on('markgeocode', function(e) {
        const latlng = e.geocode.center;
        currentMarker.setLatLng(latlng);
        map.setView(latlng, 17);
        updateFormFields(latlng.lat, latlng.lng, e.geocode.name);
      });
      
      // Locate me button
      document.getElementById('locate-me').addEventListener('click', function() {
        if (navigator.geolocation) {
          navigator.geolocation.getCurrentPosition(
            function(position) {
              const latlng = {
                lat: position.coords.latitude,
                lng: position.coords.longitude
              };
              currentMarker.setLatLng(latlng);
              map.setView(latlng, 17);
              updateFormFields(latlng.lat, latlng.lng);
            },
            function(error) {
              alert("Erreur de géolocalisation : " + error.message);
            }
          );
        } else {
          alert("Votre navigateur ne supporte pas la géolocalisation");
        }
      });
      
      // Toggle satellite view
      document.getElementById('toggle-satellite').addEventListener('click', function() {
        const isSatellite = map.hasLayer(baseLayers["Satellite"]);
        Object.values(baseLayers).forEach(layer => layer.remove());
        baseLayers[isSatellite ? "OpenStreetMap" : "Satellite"].addTo(map);
        this.innerHTML = isSatellite ? 
          '<i class="fas fa-map"></i> Vue Standard' : 
          '<i class="fas fa-satellite"></i> Vue Satellite';
      });
      
      // Update form fields with location data
      async function updateFormFields(lat, lng, address = null) {
        if (!address) {
          try {
            const response = await fetch(`${GEOCODING_SERVICE}/reverse?lat=${lat}&lon=${lng}&api_key=${API_KEY}`);
            if (!response.ok) throw new Error('Erreur de géocodage');
            
            const data = await response.json();
            address = data.display_name || "Adresse non trouvée";
          } catch {
            address = emplacementInput.value || "Adresse non trouvée";
          }
        }
        
        emplacementInput.value = address;
        detailsgeoInput.value = `Lat: ${lat.toFixed(6)}, Lng: ${lng.toFixed(6)}`;
        
        // Update info panel
        document.getElementById('coordinates').textContent = `${lat.toFixed(6)}, ${lng.toFixed(6)}`;
        document.getElementById('address').textContent = address;
        
        // Add validation classes
        emplacementInput.classList.remove('is-invalid');
        emplacementInput.classList.add('is-valid');
        detailsgeoInput.classList.remove('is-invalid');
        detailsgeoInput.classList.add('is-valid');
      }
      
      // Initialize with existing values
      document.getElementById('coordinates').textContent = `${initialLat.toFixed(6)}, ${initialLng.toFixed(6)}`;
      document.getElementById('address').textContent = emplacementInput.value || "-";
    });
  </script>
{% endblock %}

{% block body %}
<div class="container-fluid py-4">
  <div class="row">
    <div class="col-12">
      <div class="card my-4">
        <div class="card-header p-0 position-relative mt-n4 mx-3 z-index-2">
          <div class="bg-gradient-success shadow-success border-radius-lg pt-4 pb-3">
            <h6 class="text-white text-capitalize ps-3">
              <i class="material-symbols-rounded me-2">edit</i>
              Modifier le Terrain
            </h6>
          </div>
        </div>
        <div class="card-body px-4 pb-2">
          {# Flash messages #}
          {% for message in app.flashes('success') %}
            <div class="alert alert-success alert-dismissible fade show">
              <i class="material-symbols-rounded me-2">check_circle</i>
              {{ message }}
              <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
            </div>
          {% endfor %}

          {% for message in app.flashes('error') %}
            <div class="alert alert-danger alert-dismissible fade show" style="color:rgb(0, 0, 0); background-color: white; border-color: #dc3545;">
              <i class="fas fa-exclamation-circle me-2"></i>
              {{ message }}
              <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
            </div>
          {% endfor %}

          {{ form_start(form, {'attr': {'class': 'form-horizontal'}}) }}

            <div class="row">
              <div class="col-12">
                <label class="form-label">Localisation du terrain</label>
                <div id="map"></div>
                <div class="map-controls">
                  <button type="button" id="locate-me" class="btn btn-success">
                    <i class="fas fa-location-arrow"></i> Ma position
                  </button>
                  <button type="button" id="toggle-satellite" class="btn btn-success">
                    <i class="fas fa-satellite"></i> Vue Satellite
                  </button>
                </div>
                <div class="map-info-panel">
                  <p>📍 <span id="coordinates">-</span></p>
                  <p>🏠 <span id="address">-</span></p>
                </div>
              </div>
            </div>

            <div class="row">
              <div class="col-md-6">
                <div class="form-group">
                  {{ form_label(form.emplacement) }}
                  {{ form_widget(form.emplacement, {
                    'attr': {
                      'class': 'form-control' ~ (form.emplacement.vars.errors|length ? ' is-invalid' : ''),
                      'placeholder': 'Ex: Quartier résidentiel, Sousse',
                      'readonly': 'readonly'
                    }
                  }) }}
                  {% if form.emplacement.vars.errors|length %}
                    <div class="form-error-message">
                      <i class="fas fa-exclamation-circle form-error-icon"></i>
                      {% for error in form.emplacement.vars.errors %}
                        {% if error.message == 'This value should not be blank.' %}
                          <span>L'emplacement est obligatoire</span>
                        {% else %}
                          <span>{{ error.message }}</span>
                        {% endif %}
                      {% endfor %}
                    </div>
                  {% endif %}
                </div>
              </div>
              <div class="col-md-6">
                <div class="form-group">
                  {{ form_label(form.superficie) }}
                  <div class="input-group">
                    {{ form_widget(form.superficie, {
                      'attr': {
                        'class': 'form-control' ~ (form.superficie.vars.errors|length ? ' is-invalid' : ''),
                        'placeholder': 'Ex: 500'
                      }
                    }) }}
                    <span class="input-group-text">m²</span>
                  </div>
                  {% if form.superficie.vars.errors|length %}
                    <div class="form-error-message">
                      <i class="fas fa-exclamation-circle form-error-icon"></i>
                      {% for error in form.superficie.vars.errors %}
                        {% if error.message == 'This value should not be blank.' %}
                          <span>La superficie est obligatoire</span>
                        {% elseif error.message == 'This value should be of type numeric.' %}
                          <span>Doit être un nombre</span>
                        {% else %}
                          <span>{{ error.message }}</span>
                        {% endif %}
                      {% endfor %}
                    </div>
                  {% endif %}
                </div>
              </div>
            </div>

            <div class="row">
              <div class="col-md-6">
                <div class="form-group">
                  {{ form_label(form.caracteristiques) }}
                  {{ form_widget(form.caracteristiques, {
                    'attr': {
                      'class': 'form-control' ~ (form.caracteristiques.vars.errors|length ? ' is-invalid' : ''),
                      'placeholder': 'Ex: Terrain plat avec vue mer'
                    }
                  }) }}
                  {% if form.caracteristiques.vars.errors|length %}
                    <div class="form-error-message">
                      <i class="fas fa-exclamation-circle form-error-icon"></i>
                      {% for error in form.caracteristiques.vars.errors %}
                        {% if error.message == 'This value should not be blank.' %}
                          <span>Les caractéristiques sont obligatoires</span>
                        {% else %}
                          <span>{{ error.message }}</span>
                        {% endif %}
                      {% endfor %}
                    </div>
                  {% endif %}
                </div>
              </div>
              <div class="col-md-6">
                <div class="form-group">
                  {{ form_label(form.detailsgeo) }}
                  {{ form_widget(form.detailsgeo, {
                    'attr': {
                      'class': 'form-control' ~ (form.detailsgeo.vars.errors|length ? ' is-invalid' : ''),
                      'placeholder': 'Ex: Coordonnées GPS, pente, etc.',
                      'readonly': 'readonly'
                    }
                  }) }}
                  {% if form.detailsgeo.vars.errors|length %}
                    <div class="form-error-message">
                      <i class="fas fa-exclamation-circle form-error-icon"></i>
                      {% for error in form.detailsgeo.vars.errors %}
                        <span>{{ error.message }}</span>
                      {% endfor %}
                    </div>
                  {% endif %}
                </div>
              </div>
            </div>

            <div class="btn-action-group">
              <button type="submit" class="btn btn-success">
                <i class="material-symbols-rounded me-1">save</i>
                Mettre à jour
              </button>
              <a href="{{ path('app_terrain_show', {'idTerrain': terrain.idTerrain}) }}" class="btn btn-outline-secondary">
                <i class="material-symbols-rounded me-1">cancel</i>
                Annuler
              </a>
              <button type="button" class="btn btn-outline-danger" data-bs-toggle="modal" data-bs-target="#deleteModal">
                <i class="material-symbols-rounded me-1">delete</i>
                Supprimer
              </button>
            </div>

          {{ form_end(form) }}
        </div>
      </div>
    </div>
  </div>
</div>

<!-- Delete Confirmation Modal -->
<div class="modal fade" id="deleteModal" tabindex="-1" role="dialog" aria-labelledby="deleteModalLabel" aria-hidden="true">
  <div class="modal-dialog" role="document">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title" id="deleteModalLabel">Confirmer la suppression</h5>
        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
      </div>
      <div class="modal-body">
        Êtes-vous sûr de vouloir supprimer définitivement ce terrain ? Cette action est irréversible.
      </div>
      <div class="modal-footer">
        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Annuler</button>
        <form action="{{ path('app_terrain_delete', {'idTerrain': terrain.idTerrain}) }}" method="post" class="d-inline">
          <input type="hidden" name="_token" value="{{ csrf_token('delete' ~ terrain.idTerrain) }}">
          <button type="submit" class="btn btn-danger">
            <i class="material-symbols-rounded me-1">delete_forever</i>
            Confirmer la suppression
          </button>
        </form>
      </div>
    </div>
  </div>
</div>
{% endblock %}